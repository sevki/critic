package critic

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func static_index_html() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84, 0x90,
		0xcd, 0x4e, 0xc7, 0x20, 0x10, 0xc4, 0xef, 0x7d, 0x8a, 0xcd, 0xde, 0x0d,
		0x77, 0xb3, 0x25, 0x31, 0x3e, 0x80, 0x26, 0xea, 0x03, 0xec, 0xbf, 0x50,
		0x4b, 0x02, 0x2c, 0xc1, 0xc5, 0xa4, 0x6f, 0x6f, 0x0b, 0x7e, 0xf4, 0x26,
		0x27, 0x26, 0x99, 0xdf, 0xc0, 0x0c, 0x6d, 0x9a, 0xa2, 0x9d, 0x68, 0xf3,
		0xec, 0xec, 0x04, 0xdf, 0x87, 0x34, 0x68, 0xf4, 0xf6, 0x51, 0xa2, 0xd4,
		0x87, 0xaa, 0x64, 0x86, 0x9e, 0xc8, 0x0c, 0x1f, 0xdd, 0xc4, 0xed, 0x17,
		0x7b, 0xb1, 0x6f, 0x25, 0x0a, 0x3b, 0xe0, 0x0c, 0x21, 0xf1, 0xbb, 0x07,
		0x15, 0xf8, 0xa1, 0xef, 0xc9, 0x94, 0x8b, 0x77, 0x95, 0x9a, 0x80, 0x17,
		0x0d, 0x92, 0x67, 0x34, 0xad, 0x73, 0x08, 0xc9, 0xeb, 0x26, 0x6e, 0xc6,
		0xe7, 0xa7, 0x97, 0x57, 0x04, 0x9f, 0x17, 0xdd, 0x8b, 0x9f, 0x31, 0xb5,
		0xa8, 0xa1, 0x70, 0x55, 0x73, 0x62, 0x77, 0x8e, 0x95, 0xf1, 0x2f, 0xeb,
		0x37, 0x33, 0xe4, 0xd2, 0x14, 0x06, 0xb2, 0x86, 0xe8, 0x11, 0x32, 0xa7,
		0xe3, 0xde, 0xff, 0xf2, 0x1f, 0xf0, 0xd1, 0x6e, 0x29, 0x28, 0xc2, 0x27,
		0xc7, 0x76, 0xc8, 0xd1, 0xe4, 0x02, 0x51, 0x7f, 0xfb, 0x2c, 0x3f, 0x5a,
		0x1f, 0x23, 0xf4, 0xcd, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x75, 0x7b,
		0x33, 0xe9, 0x3b, 0x01, 0x00, 0x00,
	},
		"static/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"static/index.html": static_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{static_index_html, map[string]*_bintree_t{}},
	}},
}}
